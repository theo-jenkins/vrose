services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: django-backend
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - .:/app  # Hot reload: mount entire project root
      - media_data:/app/media
      - /app/backend/__pycache__  # Exclude pycache for performance
      - /app/frontend/node_modules  # Exclude frontend node_modules
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings
      - DOCKER_ENV=true
      - DOCKER_DATABASE_HOST=db
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - REDIS_URL=redis://redis:6379/0

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: react-frontend
    ports:
      - "3000:3000"
    stdin_open: true
    env_file:
      - .env
    volumes:
      - ./frontend:/app  # Hot reload: mount source code
      - /app/node_modules  # Exclude node_modules for performance
      - /app/.next  # Exclude .next build folder
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enable hot reloading
      - WATCHPACK_POLLING=true    # Additional polling for file changes
      - FAST_REFRESH=true         # Enable React Fast Refresh
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api

  db:
    image: postgres:16
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: celery-worker
    command: celery -A backend.celery_app worker --loglevel=info --queues=celery,data_import,cleanup
    env_file:
      - .env
    depends_on:
      - db
      - redis
    volumes:
      - .:/app  # Hot reload: mount source code
      - media_data:/app/media
      - /app/backend/__pycache__  # Exclude pycache
      - /app/frontend/node_modules
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings
      - DOCKER_ENV=true
      - DOCKER_DATABASE_HOST=db
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - REDIS_URL=redis://redis:6379/0

  pgadmin:
    image: dpage/pgadmin4
    container_name: db-portal
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=30  # Only show warnings/errors
    ports:
      - "8080:80"
    depends_on:
      - db
    logging:
      driver: none


volumes:
  postgres_data:
  redis_data:
  media_data:
